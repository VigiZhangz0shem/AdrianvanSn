
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.util.Timer;
import java.util.TimerTask;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * @author Adrian
 */
public class HomeScreenV2 extends javax.swing.JFrame implements Runnable {

    // Variables declaration - do not modify
    private javax.swing.JComboBox<String> graphComboBox;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem exportMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem addressMenuItem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JTextField dateTextField;
    private javax.swing.JPanel panelChart;
    private javax.swing.JScrollPane scrollPaneOne;
    private javax.swing.JScrollPane scrollPaneTwo;
    private javax.swing.JComboBox<String> tblComboBox;
    private javax.swing.JTable tblOne;
    private javax.swing.JLabel connectionLabel;
    private Data data;
    public Timer timer;
    // End of variables declaration

    /**
     * Creates new form HomeScreen
     */

    public HomeScreenV2(Data d) {
        data = d;
    }

    @Override
    public void run() {
        try {
            initComponents();
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        Path path = FileSystems.getDefault().getPath(".");
        String iconPath = path.normalize().toAbsolutePath() + "\\rtlogo.png";
        ImageIcon icon = new ImageIcon(iconPath);
        this.setIconImage(icon.getImage());
        this.setTitle("Rates Tracker");
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() throws IOException {

        jSplitPane3 = new javax.swing.JSplitPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        panelChart = new javax.swing.JPanel();
        refreshButton = new javax.swing.JButton();
        graphComboBox = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        scrollPaneTwo = new javax.swing.JScrollPane();
        javax.swing.JTable tblTwo = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        scrollPaneOne = new javax.swing.JScrollPane();
        tblOne = new javax.swing.JTable();
        dateTextField = new javax.swing.JTextField();
        tblComboBox = new javax.swing.JComboBox<>();
        searchButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        exportMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        addressMenuItem = new JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        connectionLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane3.setResizeWeight(0.5);
        jSplitPane3.setDividerSize(2);

        jSplitPane1.setBackground(new java.awt.Color(1, 0, 36));
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setResizeWeight(0.5);
        jSplitPane1.setDividerSize(2);

        jPanel2.setBackground(new java.awt.Color(1, 0, 36));

        panelChart.setBackground(new java.awt.Color(1, 0, 36));

        javax.swing.GroupLayout panelChartLayout = new javax.swing.GroupLayout(panelChart);
        panelChart.setLayout(panelChartLayout);
        panelChartLayout.setHorizontalGroup(
                panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        panelChartLayout.setVerticalGroup(
                panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 379, Short.MAX_VALUE)
        );

        refreshButton.setBackground(new java.awt.Color(1, 0, 36));
        refreshButton.setFont(new java.awt.Font("Leelawadee", 1, 14)); // NOI18N
        refreshButton.setForeground(new java.awt.Color(153, 153, 153));
        refreshButton.setText("Refresh");
        refreshButton.setBorder(null);
        refreshButton.setBorderPainted(false);
        refreshButton.setContentAreaFilled(false);
        refreshButton.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                refreshButton.setFocusable(true);
            }

            @Override
            public void mousePressed(MouseEvent e) {
                refreshButton.setFocusable(true);
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                refreshButton.setFocusable(false);
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                refreshButton.setForeground(Color.WHITE);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                refreshButton.setForeground(new java.awt.Color(153, 153, 153));
            }
        });

        graphComboBox.setBackground(Color.white);
        graphComboBox.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        graphComboBox.setForeground(new java.awt.Color(0, 0, 51));
        graphComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"USD", "EUR", "PLN", "ZAR", "CHF", "AUD", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BZD", "CAD", "CDF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRU", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SPL", "SRD", "STN", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TVD", "TWD", "TZS", "UAH", "UGX", "UYU", "UZS", "VEF", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "YER", "ZMW", "ZWD"}));

        connectionLabel.setBackground(new java.awt.Color(1, 0, 36));
        connectionLabel.setFont(new java.awt.Font("Leelawadee", 0, 12)); // NOI18N
        connectionLabel.setForeground(new java.awt.Color(255, 0, 0));
        connectionLabel.setText("Not Connected to Server");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(panelChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(graphComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 186, Short.MAX_VALUE)
                                .addComponent(connectionLabel)
                                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                                        .addComponent(graphComboBox)
                                        .addComponent(connectionLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(panelChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[]{graphComboBox, refreshButton});

        jSplitPane1.setTopComponent(jPanel2);

        jPanel3.setBackground(new java.awt.Color(1, 0, 36));
        jPanel3.setForeground(new java.awt.Color(255, 255, 255));

        scrollPaneTwo.setBackground(new java.awt.Color(1, 0, 36));
        scrollPaneTwo.setForeground(new java.awt.Color(255, 255, 255));

        tblTwo.setBackground(new java.awt.Color(1, 0, 36));
        tblTwo.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        tblTwo.setForeground(new java.awt.Color(153, 153, 255));
        tblTwo.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                },
                new String[]{
                        "Rate", "Date1", "Date2", "Date3", "Date4", "Date5"
                }
        ));
        tblTwo.setGridColor(new java.awt.Color(1, 0, 36));
        tblTwo.setRowHeight(20);
        tblTwo.setSelectionBackground(new java.awt.Color(1, 0, 36));
        tblTwo.getTableHeader().setBackground(new Color(24, 22, 145));
        tblTwo.getTableHeader().setFont(new java.awt.Font("Leelawadee", Font.BOLD, 14));
        tblTwo.getTableHeader().setForeground(Color.white);
        scrollPaneTwo.setViewportView(tblTwo);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(scrollPaneTwo, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(scrollPaneTwo, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jPanel3);

        jSplitPane3.setRightComponent(jSplitPane1);

        jPanel1.setBackground(new java.awt.Color(1, 0, 36));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        scrollPaneOne.setBackground(new java.awt.Color(1, 0, 36));
        scrollPaneOne.setForeground(new java.awt.Color(102, 255, 102));

        tblOne.setAutoCreateRowSorter(true);
        tblOne.setBackground(new java.awt.Color(1, 0, 36));
        tblOne.setFont(new java.awt.Font("Leelawadee", Font.BOLD, 18)); // NOI18N
        tblOne.setForeground(new java.awt.Color(255, 255, 255));
        tblOne.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                },
                new String[]{
                        "Date", "Currency", "Rate"
                }
        ));
        tblOne.setGridColor(new java.awt.Color(1, 0, 36));
        tblOne.setSelectionBackground(new java.awt.Color(0, 0, 51));
        tblOne.getTableHeader().setBackground(new Color(24, 22, 145));
        TableCellRenderer solidRenderer = new SolidRenderer();
        tblOne.setDefaultRenderer(Object.class, solidRenderer);
        tblOne.getTableHeader().setFont(new java.awt.Font("Leelawadee", Font.BOLD, 14));
        tblOne.getTableHeader().setForeground(Color.white);
        scrollPaneOne.setViewportView(tblOne);

        dateTextField.setBackground(new java.awt.Color(204, 204, 204));
        dateTextField.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        dateTextField.setForeground(new java.awt.Color(0, 0, 51));
        dateTextField.setText("YYYY-MM-DD");
        dateTextField.setBorder(null);
        dateTextField.setCaretColor(new java.awt.Color(0, 0, 51));
        dateTextField.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                dateTextField.setBackground(new java.awt.Color(255, 255, 255));
                dateTextField.setText("");
                dateTextField.setCaretPosition(0);
                dateTextField.removeMouseListener(this);
            }

            @Override
            public void mousePressed(MouseEvent e) {

            }

            @Override
            public void mouseReleased(MouseEvent e) {

            }

            @Override
            public void mouseEntered(MouseEvent e) {

            }

            @Override
            public void mouseExited(MouseEvent e) {

            }
        });

        tblComboBox.setBackground(Color.white);
        tblComboBox.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        tblComboBox.setForeground(new java.awt.Color(0, 0, 51));
        tblComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"ALL", "USD", "EUR", "PLN", "ZAR", "CHF", "AUD", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BZD", "CAD", "CDF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRU", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SPL", "SRD", "STN", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TVD", "TWD", "TZS", "UAH", "UGX", "UYU", "UZS", "VEF", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "YER", "ZMW", "ZWD"}));
        tblComboBox.setToolTipText("Rates");

        searchButton.setBackground(new java.awt.Color(1, 0, 36));
        searchButton.setFont(new java.awt.Font("Leelawadee", 1, 14)); // NOI18N
        searchButton.setForeground(new java.awt.Color(153, 153, 153));
        searchButton.setText("Search");
        searchButton.setBorderPainted(false);
        searchButton.setContentAreaFilled(false);
        searchButton.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                searchButton.setFocusable(true);
                String criteria = (dateTextField.getText());
                Request request = null;
                try {
                    request = new Request();
                } catch (IOException ioException) {
                    System.out.println(ioException.getMessage()); //For debugging purposes only.
                }
                String response = request.sendRequest(criteria);
                populateTable(response);
            }

            @Override
            public void mousePressed(MouseEvent e) {
                searchButton.setFocusable(true);
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                searchButton.setFocusable(false);
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                searchButton.setForeground(Color.white);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                searchButton.setForeground(new java.awt.Color(153, 153, 153));
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(scrollPaneOne, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(dateTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tblComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[]{dateTextField, tblComboBox});

        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(searchButton)
                                        .addComponent(tblComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(dateTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(scrollPaneOne, javax.swing.GroupLayout.DEFAULT_SIZE, 763, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[]{searchButton, dateTextField, tblComboBox});

        jSplitPane3.setLeftComponent(jPanel1);

        jMenuBar1.setBackground(new java.awt.Color(1, 0, 36));
        jMenuBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        jMenuBar1.setForeground(new java.awt.Color(153, 153, 153));
        jMenuBar1.setFont(new java.awt.Font("Leelawadee", 1, 14)); // NOI18N
        jMenuBar1.setRequestFocusEnabled(false);

        jMenu1.setBackground(new java.awt.Color(1, 0, 36));
        jMenu1.setForeground(new java.awt.Color(153, 153, 153));
        jMenu1.setText("File");
        jMenu1.setFont(new java.awt.Font("Leelawadee", 1, 14)); // NOI18N
        jMenu1.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                jMenu1.setFocusable(true);
            }

            @Override
            public void mousePressed(MouseEvent e) {

            }

            @Override
            public void mouseReleased(MouseEvent e) {
                jMenu1.setFocusable(false);
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                jMenu1.setForeground(Color.white);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                jMenu1.setForeground(new java.awt.Color(153, 153, 153));
            }
        });

        exportMenuItem.setBackground(new java.awt.Color(1, 0, 36));
        exportMenuItem.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        exportMenuItem.setForeground(Color.white);
        exportMenuItem.setText("Export Table");
        jMenu1.add(exportMenuItem);

        addressMenuItem.setBackground(new java.awt.Color(1, 0, 36));
        addressMenuItem.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        addressMenuItem.setForeground(Color.white);
        addressMenuItem.setText("Server Address");
        addressMenuItem.addActionListener((e) -> {
            new ServerDialog();
        });

        jMenu1.add(addressMenuItem);

        exitMenuItem.setBackground(new java.awt.Color(1, 0, 36));
        exitMenuItem.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        exitMenuItem.setForeground(Color.white);
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener((e) -> {
            System.exit(0);
        });

        jMenu1.add(exitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setBackground(new java.awt.Color(1, 0, 36));
        jMenu2.setForeground(new java.awt.Color(153, 153, 153));
        jMenu2.setText("Update");
        jMenu2.setToolTipText("Last fortnight's rates");
        jMenu2.setFont(new java.awt.Font("Leelawadee", 1, 14)); // NOI18N
        jMenu2.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                jMenu2.setFocusable(true);
            }

            @Override
            public void mousePressed(MouseEvent e) {

            }

            @Override
            public void mouseReleased(MouseEvent e) {
                jMenu2.setFocusable(false);
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                jMenu2.setForeground(Color.white);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                jMenu2.setForeground(new java.awt.Color(153, 153, 153));
            }
        });

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSplitPane3)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSplitPane3)
        );

        pack();
        this.setLocationRelativeTo(null);
        setConnectionLabel();

//        timer = new Timer();
//       timer.scheduleAtFixedRate(new TimerTask() {
//           @Override
//          public void run() {
//              System.out.println("Tick");
//               setConnectionLabel(data.getServerConnectionStatus());
//            }}, 0, 5000);
    }// </editor-fold>

    public void setConnectionLabel() {
        String x = data.getServerConnectionStatus();
        switch (x) {
            case "Connected":
                connectionLabel.setBackground(new java.awt.Color(1, 0, 36));
                connectionLabel.setFont(new java.awt.Font("Leelawadee", 0, 12)); // NOI18N
                connectionLabel.setForeground(new java.awt.Color(0, 153, 41));
                connectionLabel.setText(x);
                break;
            default:
                connectionLabel.setBackground(new java.awt.Color(1, 0, 36));
                connectionLabel.setFont(new java.awt.Font("Leelawadee", 0, 12)); // NOI18N
                connectionLabel.setForeground(new java.awt.Color(255, 0, 0));
                connectionLabel.setText(x);
                break;
        }
    }

    private void populateTable(String response) {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Date");
        model.addColumn("Country");
        model.addColumn("Rate");
        tblOne.setModel(model);
        if (response.equals("No table with that date")) {
            //If no table exists, display message to user in table and set background so table not white.
            model.addRow(new Object[]{"No Results", null, null});
            for (int i = 0; i < 56; i++) {
                model.addRow(new Object[]{null, null, null});
            }
            TableCellRenderer solidRenderer = new SolidRenderer();
            tblOne.setDefaultRenderer(Object.class, solidRenderer);
        } else {
            try {
                int rowCount = model.getRowCount();
                for (int k = rowCount - 1; k >= 0; k--) {
                    model.removeRow(k);
                }
                String[] array = response.split("\\|");
                for (int i = 0; i < array.length; i++) {
                    String[] rate = array[i].split(":");
                    model.addRow(new Object[]{rate[0], rate[1], rate[2]});
                }
                TableCellRenderer renderer = new EvenOddRenderer();
                tblOne.setDefaultRenderer(Object.class, renderer);
            } catch (ArrayIndexOutOfBoundsException e) {
                //If error occurs, display message to user in table and set background so table not white.
                model.addRow(new Object[]{"Error", null, null});
                for (int i = 0; i < 56; i++) {
                    model.addRow(new Object[]{null, null, null});
                }
                TableCellRenderer solidRenderer = new SolidRenderer();
                tblOne.setDefaultRenderer(Object.class, solidRenderer);
            }

        }
    }

    class EvenOddRenderer implements TableCellRenderer {

        public final DefaultTableCellRenderer DEFAULT_RENDERER = new DefaultTableCellRenderer();

        public Component getTableCellRendererComponent(JTable table, Object value,
                                                       boolean isSelected, boolean hasFocus, int row, int column) {
            Component renderer = DEFAULT_RENDERER.getTableCellRendererComponent(
                    table, value, isSelected, hasFocus, row, column);
            ((JLabel) renderer).setOpaque(true);
            Color foreground, background;
            if (isSelected) {
                foreground = new Color(1, 0, 36);
                background = Color.white;
            } else {
                if (row % 2 == 0) {
                    foreground = new Color(235, 255, 253);
                    background = new Color(1, 0, 36);
                } else {
                    foreground = new Color(255, 255, 255);
                    background = new Color(1, 10, 36);
                }
            }
            renderer.setForeground(foreground);
            renderer.setBackground(background);
            return renderer;
        }
    }

    class SolidRenderer implements TableCellRenderer {

        public final DefaultTableCellRenderer DEFAULT_RENDERER = new DefaultTableCellRenderer();

        public Component getTableCellRendererComponent(JTable table, Object value,
                                                       boolean isSelected, boolean hasFocus, int row, int column) {
            Component renderer = DEFAULT_RENDERER.getTableCellRendererComponent(
                    table, value, isSelected, hasFocus, row, column);
            ((JLabel) renderer).setOpaque(true);
            Color foreground, background;
            if (isSelected) {
                foreground = new Color(1, 0, 36);
                background = Color.white;
            } else {
                if (row % 2 == 0) {
                    foreground = new Color(235, 255, 253);
                    background = new Color(1, 0, 36);
                } else {
                    foreground = new Color(255, 255, 255);
                    background = new Color(1, 0, 36);
                }
            }
            renderer.setForeground(foreground);
            renderer.setBackground(background);
            return renderer;
        }
    }


}

